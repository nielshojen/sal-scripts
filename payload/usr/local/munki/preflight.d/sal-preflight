#!/usr/local/sal/Python.framework/Versions/Current/bin/python3
"""preflight

Retrieves plugin scripts to run on client.
"""


import argparse
import os
import pathlib
import shutil
import sys
import urllib

import requests.exceptions
import sal

EXTERNAL_SCRIPTS_DIR = '/usr/local/sal/external_scripts'
verbose = 0

def main():
    set_verbosity()
    sal.setup_sal_client()

    if sal.sal_pref('SyncScripts') == True:
        if not os.path.exists(EXTERNAL_SCRIPTS_DIR):
            os.makedirs(EXTERNAL_SCRIPTS_DIR)
        server_scripts = get_checksums()
        if server_scripts:
            create_dirs(server_scripts)
            download_scripts(server_scripts)

        cleanup_old_scripts(server_scripts)
        remove_empty_folders(EXTERNAL_SCRIPTS_DIR)


def get_prefs():
    # Check for mandatory prefs and bail if any are missing.
    required_prefs = {}
    required_prefs["key"] = sal.sal_pref('key')
    required_prefs["ServerURL"] = sal.sal_pref('ServerURL').rstrip('/')

    for key, val in required_prefs.items():
        if not val:
            sys.exit(f'Required Sal preference "{key}" is not set.')
    return required_prefs


def get_checksums():
    """Downloads the checksum of existing scripts.

    Returns:
        A dict with the script name, plugin name and hash of the script
        or None if no external scripts are used.
    """
    sal_client = sal.get_sal_client()
    error_msg = None
    try:
        response = sal_client.post('preflight-v2/', data={'os_family': 'Darwin'})
    except requests.exceptions.RequestException as error:
        if verbose:
            print(str(error_msg), file=sys.stderr)
        return
    if response.status_code != requests.status_codes.codes.okay:
        if verbose:
            print(f'Request failed with HTTP {response.status_code}', file=sys.stderr)
        return
    if response and "<h1>Page not found</h1>" in response.text:
        if verbose:
            print(response.text, file=sys.stderr)
        return

    try:
        return response.json()
    except ValueError:
        if verbose:
            print("Didn't receive valid JSON.", file=sys.stderr)
        return None


def download_scripts(server_scripts):
    """Checksum local scripts and if no matches, download."""
    for server_script in server_scripts:
        download_required = False
        target_script = os.path.join(
            EXTERNAL_SCRIPTS_DIR, server_script['plugin'], server_script['filename'])
        if not os.path.exists(target_script):
            download_required = True
        else:
            local_hash = sal.get_hash(target_script)
            if local_hash != server_script['hash']:
                download_required = True

        if download_required == True:
            if verbose:
                print(f'downloading {server_script["filename"]}')
            download_and_write_script(server_script)


def download_and_write_script(server_script):
    """Gets script from the server and makes it execuatble."""
    try:
        response = sal.get_sal_client().get(
            f"preflight-v2/get-script/{server_script['plugin']}/{server_script['filename']}/")
    except requests.exceptions.RequestException as error:
        if verbose:
            print('Error received downloading script:', file=sys.stderr)
            print(str(error), file=sys.stderr)
        return

    if response.status_code != requests.status_codes.codes.okay:
        if verbose:
            print('Error received downloading script:', file=sys.stderr)
            print(response.text, file=sys.stderr)

    script = open(
        os.path.join(EXTERNAL_SCRIPTS_DIR, server_script['plugin'], server_script['filename']),
        'w')
    try:
        data = response.json()
    except ValueError:
        if verbose:
            print('Did not receive valid JSON when requesting script content.', file=sys.stderr)
        return

    script.write(data[0]['content'])
    script.close()
    os.chmod(
        os.path.join(EXTERNAL_SCRIPTS_DIR, server_script['plugin'], server_script['filename']),
        0o755)


def create_dirs(server_scripts):
    """Creates any directories needed for external scripts

    Directories are named after the plugin.
    """
    for item in server_scripts:
        (pathlib.Path(EXTERNAL_SCRIPTS_DIR) / item['plugin']).mkdir(parents=True, exist_ok=True)


def cleanup_old_scripts(server_scripts):
    """Finds and removes scripts on disk that aren't needed anymore."""
    if server_scripts == None:
        # No scripts from the server, nail the whole thing
        shutil.rmtree(EXTERNAL_SCRIPTS_DIR)
    else:
        keep = []
        for server_script in server_scripts:
            keep.append(os.path.join(EXTERNAL_SCRIPTS_DIR, server_script['plugin'],
                                     server_script['filename']))

        for root, subFolders, files in os.walk(EXTERNAL_SCRIPTS_DIR):
            for script in files:
                if os.path.join(root, script) not in keep:
                    os.remove(os.path.join(root, script))


def remove_empty_folders(path):
    """Function to remove empty folders."""
    for root, dirs, files in os.walk(path,topdown=False):
         for name in dirs:
             fname = os.path.join(root,name)
             if not os.listdir(fname):
                 os.removedirs(fname)


def set_verbosity():
    """Set the verbosity based on options or munki verbosity level."""
    args = get_args()
    verbose = (
        5 if args.debug else int(os.environ.get('MUNKI_VERBOSITY_LEVEL', 0)))


def get_args():
    """Return commandline options."""
    parser = argparse.ArgumentParser()
    parser.add_argument("run_type")
    parser.add_argument(
        "-d", "--debug", default=False, action="store_true", help="Enable debug output.")
    # We have no arguments, so don't store the results.
    return parser.parse_args()


if __name__ == '__main__':
    main()
