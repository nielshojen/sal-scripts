#!/usr/local/sal/Python.framework/Versions/Current/bin/python3


import os
import subprocess
import sys
import socket
import urllib.request, urllib.error

sys.path[:0] = ['/usr/local/sal/checkin_modules']
import munki_checkin
import sal

from Foundation import CFPreferencesCopyAppValue, NSDate


TOUCH_FILE_PATH = '/Users/Shared/.com.salopensource.sal.run'
LAUNCHD = 'com.salopensource.sal.runner'
LAUNCHD_PATH = f'/Library/LaunchDaemons/{LAUNCHD}.plist'
SUBMIT_SCRIPT = '/usr/local/sal/bin/sal-submit'


def munkiPref(pref_name):
    pref_value = CFPreferencesCopyAppValue(pref_name, "ManagedInstalls")
    if isinstance(pref_value, NSDate):
        # convert NSDate/CFDates to strings
        pref_value = str(pref_value)
    return pref_value


def check_for_errors(report):
    """Checks if the device was offline for last Munki run."""
    errors = report.get("Errors", [])
    warnings = report.get("Warnings", [])
    target_errors = ["Could not retrieve managed install primary manifest."]
    target_warnings = [
        ["Could not download Apple SUS catalog:",
         "\t(-1009, u'The Internet connection appears to be offline.')"],
        ["Could not download Apple SUS catalog:",
         "\t(-1009, 'The Internet connection appears to be offline.')"],
    ]

    if munkiPref("InstallAppleSoftwareUpdates"):
        if warnings in target_warnings and any(
            error.startswith(target_error)
            for target_error in target_errors
            for error in errors
        ):
            return True
    else:
        if any(
            error.startswith(target_error)
            for target_error in target_errors
            for error in errors
        ):
            return True

    return False


def check_server_connection():
    host = munkiPref('SoftwareRepoURL')
    try:
        urllib.request.urlopen(host, timeout=5).getcode()
    except urllib.error.HTTPError as e:
        # If we get a http error, the server is returning _something_
        return True
    except urllib.error.URLError as e:
        return False
    except socket.timeout as e:
        return False
    return True


def check_server_online():
    # is the offline report pref true?
    if not sal.sal_pref('SendOfflineReport'):
        return
    # read report
    report = munki_checkin.get_managed_install_report()
    # check for errors and warnings
    if not check_for_errors(report):
        sal.set_sal_pref('LastRunWasOffline', False)
        return
    # if they're there check is server is really offline
    if check_server_connection():
        sal.set_sal_pref('LastRunWasOffline', True)
        return

    # If we get here, it's online
    sal.set_sal_pref('LastRunWasOffline', False)

def write_touch_file():
    if os.path.exists(TOUCH_FILE_PATH):
        os.remove(TOUCH_FILE_PATH)

    if not os.path.exists(TOUCH_FILE_PATH):
        with open(TOUCH_FILE_PATH, 'a'):
            os.utime(TOUCH_FILE_PATH, None)


def ensure_launchd_loaded():
    loaded_launchds = subprocess.check_output(['/bin/launchctl', 'list'], text=True)
    # load the launchd if it's not loaded and is present on disk
    if LAUNCHD not in loaded_launchds and os.path.exists(LAUNCHD_PATH):
        subprocess.check_call(['/bin/launchctl', 'load', LAUNCHD_PATH])


def main():
    check_server_online()
    write_touch_file()
    ensure_launchd_loaded()
    # If the launchd isn't present, call the submit script old school
    if not os.path.exists(LAUNCHD_PATH):
        subprocess.check_call(SUBMIT_SCRIPT)


if __name__ == '__main__':
    main()
